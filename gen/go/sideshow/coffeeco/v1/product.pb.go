// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: sideshow/coffeeco/v1/product.proto

package coffeecov1

import (
	_ "github.com/datacircus/sideshow/gen/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoffeeProduct_Size int32

const (
	CoffeeProduct_SIZE_UNSPECIFIED CoffeeProduct_Size = 0
	CoffeeProduct_SIZE_SMALL       CoffeeProduct_Size = 1
	CoffeeProduct_SIZE_MEDIUM      CoffeeProduct_Size = 2
	CoffeeProduct_SIZE_LARGE       CoffeeProduct_Size = 3
	CoffeeProduct_SIZE_XLARGE      CoffeeProduct_Size = 4
)

// Enum value maps for CoffeeProduct_Size.
var (
	CoffeeProduct_Size_name = map[int32]string{
		0: "SIZE_UNSPECIFIED",
		1: "SIZE_SMALL",
		2: "SIZE_MEDIUM",
		3: "SIZE_LARGE",
		4: "SIZE_XLARGE",
	}
	CoffeeProduct_Size_value = map[string]int32{
		"SIZE_UNSPECIFIED": 0,
		"SIZE_SMALL":       1,
		"SIZE_MEDIUM":      2,
		"SIZE_LARGE":       3,
		"SIZE_XLARGE":      4,
	}
)

func (x CoffeeProduct_Size) Enum() *CoffeeProduct_Size {
	p := new(CoffeeProduct_Size)
	*p = x
	return p
}

func (x CoffeeProduct_Size) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoffeeProduct_Size) Descriptor() protoreflect.EnumDescriptor {
	return file_sideshow_coffeeco_v1_product_proto_enumTypes[0].Descriptor()
}

func (CoffeeProduct_Size) Type() protoreflect.EnumType {
	return &file_sideshow_coffeeco_v1_product_proto_enumTypes[0]
}

func (x CoffeeProduct_Size) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoffeeProduct_Size.Descriptor instead.
func (CoffeeProduct_Size) EnumDescriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_product_proto_rawDescGZIP(), []int{1, 0}
}

type CoffeeProduct_Style int32

const (
	CoffeeProduct_STYLE_UNSPECIFIED       CoffeeProduct_Style = 0
	CoffeeProduct_STYLE_EXPRESSO          CoffeeProduct_Style = 1
	CoffeeProduct_STYLE_DOPPIO            CoffeeProduct_Style = 2
	CoffeeProduct_STYLE_LUNGO             CoffeeProduct_Style = 3
	CoffeeProduct_STYLE_RISTRETTO         CoffeeProduct_Style = 4
	CoffeeProduct_STYLE_MACCHIATO         CoffeeProduct_Style = 5
	CoffeeProduct_STYLE_CORRETTO          CoffeeProduct_Style = 6
	CoffeeProduct_STYLE_CON_PANNA         CoffeeProduct_Style = 7
	CoffeeProduct_STYLE_ROMANO            CoffeeProduct_Style = 8
	CoffeeProduct_STYLE_CAPPUCCINO        CoffeeProduct_Style = 9
	CoffeeProduct_STYLE_AMERICANO         CoffeeProduct_Style = 10
	CoffeeProduct_STYLE_CAFE_LATTE        CoffeeProduct_Style = 11
	CoffeeProduct_STYLE_FLAT_WHITE        CoffeeProduct_Style = 12
	CoffeeProduct_STYLE_MAROCCHINO        CoffeeProduct_Style = 13
	CoffeeProduct_STYLE_MOCHA             CoffeeProduct_Style = 14
	CoffeeProduct_STYLE_BICERIN           CoffeeProduct_Style = 15
	CoffeeProduct_STYLE_BREVE             CoffeeProduct_Style = 16
	CoffeeProduct_STYLE_RAF_COFFEE        CoffeeProduct_Style = 17
	CoffeeProduct_STYLE_MEAD_RAF          CoffeeProduct_Style = 18
	CoffeeProduct_STYLE_VIENNA_COFFEE     CoffeeProduct_Style = 19
	CoffeeProduct_STYLE_CHOCOLATE_MILK    CoffeeProduct_Style = 20
	CoffeeProduct_STYLE_COCOA             CoffeeProduct_Style = 21
	CoffeeProduct_STYLE_LATTE_MACCHIATO   CoffeeProduct_Style = 22
	CoffeeProduct_STYLE_GLACE             CoffeeProduct_Style = 23
	CoffeeProduct_STYLE_FREDDO            CoffeeProduct_Style = 24
	CoffeeProduct_STYLE_IRISH_COFFEE      CoffeeProduct_Style = 25
	CoffeeProduct_STYLE_FRAPPE            CoffeeProduct_Style = 26
	CoffeeProduct_STYLE_CAPPUCCINO_FREDDO CoffeeProduct_Style = 27
	CoffeeProduct_STYLE_CARAMEL_FRAPPE    CoffeeProduct_Style = 28
	CoffeeProduct_STYLE_EXPRESSO_LACCINO  CoffeeProduct_Style = 29
	CoffeeProduct_STYLE_CAFFE_AFFOGATO    CoffeeProduct_Style = 30
	CoffeeProduct_STYLE_POUR_OVER         CoffeeProduct_Style = 31
	CoffeeProduct_STYLE_LATTE             CoffeeProduct_Style = 32
)

// Enum value maps for CoffeeProduct_Style.
var (
	CoffeeProduct_Style_name = map[int32]string{
		0:  "STYLE_UNSPECIFIED",
		1:  "STYLE_EXPRESSO",
		2:  "STYLE_DOPPIO",
		3:  "STYLE_LUNGO",
		4:  "STYLE_RISTRETTO",
		5:  "STYLE_MACCHIATO",
		6:  "STYLE_CORRETTO",
		7:  "STYLE_CON_PANNA",
		8:  "STYLE_ROMANO",
		9:  "STYLE_CAPPUCCINO",
		10: "STYLE_AMERICANO",
		11: "STYLE_CAFE_LATTE",
		12: "STYLE_FLAT_WHITE",
		13: "STYLE_MAROCCHINO",
		14: "STYLE_MOCHA",
		15: "STYLE_BICERIN",
		16: "STYLE_BREVE",
		17: "STYLE_RAF_COFFEE",
		18: "STYLE_MEAD_RAF",
		19: "STYLE_VIENNA_COFFEE",
		20: "STYLE_CHOCOLATE_MILK",
		21: "STYLE_COCOA",
		22: "STYLE_LATTE_MACCHIATO",
		23: "STYLE_GLACE",
		24: "STYLE_FREDDO",
		25: "STYLE_IRISH_COFFEE",
		26: "STYLE_FRAPPE",
		27: "STYLE_CAPPUCCINO_FREDDO",
		28: "STYLE_CARAMEL_FRAPPE",
		29: "STYLE_EXPRESSO_LACCINO",
		30: "STYLE_CAFFE_AFFOGATO",
		31: "STYLE_POUR_OVER",
		32: "STYLE_LATTE",
	}
	CoffeeProduct_Style_value = map[string]int32{
		"STYLE_UNSPECIFIED":       0,
		"STYLE_EXPRESSO":          1,
		"STYLE_DOPPIO":            2,
		"STYLE_LUNGO":             3,
		"STYLE_RISTRETTO":         4,
		"STYLE_MACCHIATO":         5,
		"STYLE_CORRETTO":          6,
		"STYLE_CON_PANNA":         7,
		"STYLE_ROMANO":            8,
		"STYLE_CAPPUCCINO":        9,
		"STYLE_AMERICANO":         10,
		"STYLE_CAFE_LATTE":        11,
		"STYLE_FLAT_WHITE":        12,
		"STYLE_MAROCCHINO":        13,
		"STYLE_MOCHA":             14,
		"STYLE_BICERIN":           15,
		"STYLE_BREVE":             16,
		"STYLE_RAF_COFFEE":        17,
		"STYLE_MEAD_RAF":          18,
		"STYLE_VIENNA_COFFEE":     19,
		"STYLE_CHOCOLATE_MILK":    20,
		"STYLE_COCOA":             21,
		"STYLE_LATTE_MACCHIATO":   22,
		"STYLE_GLACE":             23,
		"STYLE_FREDDO":            24,
		"STYLE_IRISH_COFFEE":      25,
		"STYLE_FRAPPE":            26,
		"STYLE_CAPPUCCINO_FREDDO": 27,
		"STYLE_CARAMEL_FRAPPE":    28,
		"STYLE_EXPRESSO_LACCINO":  29,
		"STYLE_CAFFE_AFFOGATO":    30,
		"STYLE_POUR_OVER":         31,
		"STYLE_LATTE":             32,
	}
)

func (x CoffeeProduct_Style) Enum() *CoffeeProduct_Style {
	p := new(CoffeeProduct_Style)
	*p = x
	return p
}

func (x CoffeeProduct_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoffeeProduct_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_sideshow_coffeeco_v1_product_proto_enumTypes[1].Descriptor()
}

func (CoffeeProduct_Style) Type() protoreflect.EnumType {
	return &file_sideshow_coffeeco_v1_product_proto_enumTypes[1]
}

func (x CoffeeProduct_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoffeeProduct_Style.Descriptor instead.
func (CoffeeProduct_Style) EnumDescriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_product_proto_rawDescGZIP(), []int{1, 1}
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProductType:
	//
	//	*Product_Coffee
	ProductType isProduct_ProductType `protobuf_oneof:"product_type"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sideshow_coffeeco_v1_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_sideshow_coffeeco_v1_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_product_proto_rawDescGZIP(), []int{0}
}

func (m *Product) GetProductType() isProduct_ProductType {
	if m != nil {
		return m.ProductType
	}
	return nil
}

func (x *Product) GetCoffee() *CoffeeProduct {
	if x, ok := x.GetProductType().(*Product_Coffee); ok {
		return x.Coffee
	}
	return nil
}

type isProduct_ProductType interface {
	isProduct_ProductType()
}

type Product_Coffee struct {
	// While we grow, there is only coffee. We swear it is worth the price...
	Coffee *CoffeeProduct `protobuf:"bytes,1,opt,name=coffee,proto3,oneof"`
}

func (*Product_Coffee) isProduct_ProductType() {}

type CoffeeProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We need to track the "type" of Coffee being sold
	// This helps us to see which Vendor has the best product
	Coffee *Coffee `protobuf:"bytes,1,opt,name=coffee,proto3" json:"coffee,omitempty"`
	// In order to sell a product, we need to understand the size that is required
	// If most people order a specific type of coffee at a specific size, then
	// We can forecast our future demands and ensure our product doesn't sit on the
	// Shelf too long. Coffee has a shelf life (for best flavor, scent) of about 1 month
	Size CoffeeProduct_Size `protobuf:"varint,2,opt,name=size,proto3,enum=sideshow.coffeeco.v1.CoffeeProduct_Size" json:"size,omitempty"`
	// Each Coffee can be produced with a specific Style
	// This is like the traditional SKU from retail
	Style CoffeeProduct_Style `protobuf:"varint,3,opt,name=style,proto3,enum=sideshow.coffeeco.v1.CoffeeProduct_Style" json:"style,omitempty"` // typically each Product would have a Unit Cost. Let's suspend disbelief for the sake of the presentation
}

func (x *CoffeeProduct) Reset() {
	*x = CoffeeProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sideshow_coffeeco_v1_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoffeeProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoffeeProduct) ProtoMessage() {}

func (x *CoffeeProduct) ProtoReflect() protoreflect.Message {
	mi := &file_sideshow_coffeeco_v1_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoffeeProduct.ProtoReflect.Descriptor instead.
func (*CoffeeProduct) Descriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_product_proto_rawDescGZIP(), []int{1}
}

func (x *CoffeeProduct) GetCoffee() *Coffee {
	if x != nil {
		return x.Coffee
	}
	return nil
}

func (x *CoffeeProduct) GetSize() CoffeeProduct_Size {
	if x != nil {
		return x.Size
	}
	return CoffeeProduct_SIZE_UNSPECIFIED
}

func (x *CoffeeProduct) GetStyle() CoffeeProduct_Style {
	if x != nil {
		return x.Style
	}
	return CoffeeProduct_STYLE_UNSPECIFIED
}

var File_sideshow_coffeeco_v1_product_proto protoreflect.FileDescriptor

var file_sideshow_coffeeco_v1_product_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x63, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63,
	0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77,
	0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x42, 0x15, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x0b, 0x22, 0x90, 0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63,
	0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01,
	0x01, 0x82, 0x01, 0x03, 0x22, 0x01, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x82,
	0x01, 0x03, 0x22, 0x01, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x04, 0x22, 0xc5, 0x05, 0x0a,
	0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x50, 0x50, 0x49,
	0x4f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x55, 0x4e,
	0x47, 0x4f, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x52, 0x49,
	0x53, 0x54, 0x52, 0x45, 0x54, 0x54, 0x4f, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x43, 0x48, 0x49, 0x41, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x54, 0x54, 0x4f,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x4e, 0x4e, 0x41, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x52, 0x4f, 0x4d, 0x41, 0x4e, 0x4f, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x55, 0x43, 0x43, 0x49, 0x4e, 0x4f, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41,
	0x4e, 0x4f, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x41,
	0x46, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x0c,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4f, 0x43, 0x43,
	0x48, 0x49, 0x4e, 0x4f, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x4d, 0x4f, 0x43, 0x48, 0x41, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x42, 0x49, 0x43, 0x45, 0x52, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x56, 0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x46, 0x5f, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x10,
	0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x44, 0x5f,
	0x52, 0x41, 0x46, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x56,
	0x49, 0x45, 0x4e, 0x4e, 0x41, 0x5f, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x10, 0x13, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x49, 0x4c, 0x4b, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x43, 0x4f, 0x41, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x43, 0x48, 0x49, 0x41,
	0x54, 0x4f, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x47, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46,
	0x52, 0x45, 0x44, 0x44, 0x4f, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x49, 0x52, 0x49, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x10, 0x19, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x50, 0x50, 0x45, 0x10,
	0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x55,
	0x43, 0x43, 0x49, 0x4e, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x44, 0x44, 0x4f, 0x10, 0x1b, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x4c, 0x5f,
	0x46, 0x52, 0x41, 0x50, 0x50, 0x45, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x5f, 0x4c, 0x41, 0x43, 0x43, 0x49,
	0x4e, 0x4f, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x41,
	0x46, 0x46, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x4f, 0x47, 0x41, 0x54, 0x4f, 0x10, 0x1e, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x54,
	0x54, 0x45, 0x10, 0x20, 0x42, 0xe1, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x69, 0x72, 0x63, 0x75, 0x73, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa, 0x02,
	0x14, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65,
	0x63, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77,
	0x5c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x53,
	0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x5c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x16, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x3a, 0x3a, 0x43, 0x6f, 0x66, 0x66,
	0x65, 0x65, 0x63, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sideshow_coffeeco_v1_product_proto_rawDescOnce sync.Once
	file_sideshow_coffeeco_v1_product_proto_rawDescData = file_sideshow_coffeeco_v1_product_proto_rawDesc
)

func file_sideshow_coffeeco_v1_product_proto_rawDescGZIP() []byte {
	file_sideshow_coffeeco_v1_product_proto_rawDescOnce.Do(func() {
		file_sideshow_coffeeco_v1_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_sideshow_coffeeco_v1_product_proto_rawDescData)
	})
	return file_sideshow_coffeeco_v1_product_proto_rawDescData
}

var file_sideshow_coffeeco_v1_product_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sideshow_coffeeco_v1_product_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sideshow_coffeeco_v1_product_proto_goTypes = []interface{}{
	(CoffeeProduct_Size)(0),  // 0: sideshow.coffeeco.v1.CoffeeProduct.Size
	(CoffeeProduct_Style)(0), // 1: sideshow.coffeeco.v1.CoffeeProduct.Style
	(*Product)(nil),          // 2: sideshow.coffeeco.v1.Product
	(*CoffeeProduct)(nil),    // 3: sideshow.coffeeco.v1.CoffeeProduct
	(*Coffee)(nil),           // 4: sideshow.coffeeco.v1.Coffee
}
var file_sideshow_coffeeco_v1_product_proto_depIdxs = []int32{
	3, // 0: sideshow.coffeeco.v1.Product.coffee:type_name -> sideshow.coffeeco.v1.CoffeeProduct
	4, // 1: sideshow.coffeeco.v1.CoffeeProduct.coffee:type_name -> sideshow.coffeeco.v1.Coffee
	0, // 2: sideshow.coffeeco.v1.CoffeeProduct.size:type_name -> sideshow.coffeeco.v1.CoffeeProduct.Size
	1, // 3: sideshow.coffeeco.v1.CoffeeProduct.style:type_name -> sideshow.coffeeco.v1.CoffeeProduct.Style
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_sideshow_coffeeco_v1_product_proto_init() }
func file_sideshow_coffeeco_v1_product_proto_init() {
	if File_sideshow_coffeeco_v1_product_proto != nil {
		return
	}
	file_sideshow_coffeeco_v1_coffee_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sideshow_coffeeco_v1_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sideshow_coffeeco_v1_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoffeeProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sideshow_coffeeco_v1_product_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Product_Coffee)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sideshow_coffeeco_v1_product_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sideshow_coffeeco_v1_product_proto_goTypes,
		DependencyIndexes: file_sideshow_coffeeco_v1_product_proto_depIdxs,
		EnumInfos:         file_sideshow_coffeeco_v1_product_proto_enumTypes,
		MessageInfos:      file_sideshow_coffeeco_v1_product_proto_msgTypes,
	}.Build()
	File_sideshow_coffeeco_v1_product_proto = out.File
	file_sideshow_coffeeco_v1_product_proto_rawDesc = nil
	file_sideshow_coffeeco_v1_product_proto_goTypes = nil
	file_sideshow_coffeeco_v1_product_proto_depIdxs = nil
}
