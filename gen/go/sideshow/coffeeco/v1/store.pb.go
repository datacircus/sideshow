// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: sideshow/coffeeco/v1/store.proto

package coffeecov1

import (
	_ "github.com/datacircus/sideshow/gen/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Store_LocationStatus int32

const (
	Store_LOCATION_STATUS_UNSPECIFIED         Store_LocationStatus = 0
	Store_LOCATION_STATUS_UNDER_CONSTRUCTION  Store_LocationStatus = 1
	Store_LOCATION_STATUS_OPEN_TO_PUBLIC      Store_LocationStatus = 2
	Store_LOCATION_STATUS_CLOSED_FOR_UPGRADES Store_LocationStatus = 3
	Store_LOCATION_STATUS_CLOSED_PERMANENTLY  Store_LocationStatus = 4
)

// Enum value maps for Store_LocationStatus.
var (
	Store_LocationStatus_name = map[int32]string{
		0: "LOCATION_STATUS_UNSPECIFIED",
		1: "LOCATION_STATUS_UNDER_CONSTRUCTION",
		2: "LOCATION_STATUS_OPEN_TO_PUBLIC",
		3: "LOCATION_STATUS_CLOSED_FOR_UPGRADES",
		4: "LOCATION_STATUS_CLOSED_PERMANENTLY",
	}
	Store_LocationStatus_value = map[string]int32{
		"LOCATION_STATUS_UNSPECIFIED":         0,
		"LOCATION_STATUS_UNDER_CONSTRUCTION":  1,
		"LOCATION_STATUS_OPEN_TO_PUBLIC":      2,
		"LOCATION_STATUS_CLOSED_FOR_UPGRADES": 3,
		"LOCATION_STATUS_CLOSED_PERMANENTLY":  4,
	}
)

func (x Store_LocationStatus) Enum() *Store_LocationStatus {
	p := new(Store_LocationStatus)
	*p = x
	return p
}

func (x Store_LocationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Store_LocationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sideshow_coffeeco_v1_store_proto_enumTypes[0].Descriptor()
}

func (Store_LocationStatus) Type() protoreflect.EnumType {
	return &file_sideshow_coffeeco_v1_store_proto_enumTypes[0]
}

func (x Store_LocationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Store_LocationStatus.Descriptor instead.
func (Store_LocationStatus) EnumDescriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_store_proto_rawDescGZIP(), []int{0, 0}
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each location has an identifier
	StoreId             string                 `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Created             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	OpenedOn            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=opened_on,json=openedOn,proto3" json:"opened_on,omitempty"`
	ClosedPermanentlyOn *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=closed_permanently_on,json=closedPermanentlyOn,proto3" json:"closed_permanently_on,omitempty"`
	// In order to understand the health of a Location, we need to understand
	// the state of a location. We could see trends dipping and wonder, but understanding
	// if a location is open to the public, under construction, or closed forever really help
	// to understand what worked or didn't work with a specific location
	Status Store_LocationStatus `protobuf:"varint,5,opt,name=status,proto3,enum=sideshow.coffeeco.v1.Store_LocationStatus" json:"status,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sideshow_coffeeco_v1_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_sideshow_coffeeco_v1_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_sideshow_coffeeco_v1_store_proto_rawDescGZIP(), []int{0}
}

func (x *Store) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *Store) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Store) GetOpenedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenedOn
	}
	return nil
}

func (x *Store) GetClosedPermanentlyOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedPermanentlyOn
	}
	return nil
}

func (x *Store) GetStatus() Store_LocationStatus {
	if x != nil {
		return x.Status
	}
	return Store_LOCATION_STATUS_UNSPECIFIED
}

var File_sideshow_coffeeco_v1_store_proto protoreflect.FileDescriptor

var file_sideshow_coffeeco_v1_store_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x63, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x6a, 0xba, 0x48, 0x67, 0xba, 0x01, 0x64, 0x0a, 0x13,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x40, 0x41, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x62, 0x65, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x6f, 0x20, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3c, 0x3d, 0x20, 0x6e,
	0x6f, 0x77, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x57, 0xba, 0x48, 0x54,
	0xba, 0x01, 0x51, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x68,
	0x65, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x41, 0x20, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x1a, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3c, 0x3d,
	0x20, 0x6e, 0x6f, 0x77, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xa7,
	0x01, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x57, 0xba, 0x48, 0x54, 0xba,
	0x01, 0x51, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x65,
	0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x41, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x1a, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3c, 0x3d, 0x20,
	0x6e, 0x6f, 0x77, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x03, 0x22,
	0x01, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x53, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x10, 0x04, 0x42, 0xdf, 0x01, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x69, 0x72, 0x63, 0x75, 0x73, 0x2f, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x43, 0x58, 0xaa, 0x02, 0x14, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x43,
	0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x53, 0x69, 0x64,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x5c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x20, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x5c, 0x43, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x63, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x53, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x3a,
	0x3a, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sideshow_coffeeco_v1_store_proto_rawDescOnce sync.Once
	file_sideshow_coffeeco_v1_store_proto_rawDescData = file_sideshow_coffeeco_v1_store_proto_rawDesc
)

func file_sideshow_coffeeco_v1_store_proto_rawDescGZIP() []byte {
	file_sideshow_coffeeco_v1_store_proto_rawDescOnce.Do(func() {
		file_sideshow_coffeeco_v1_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_sideshow_coffeeco_v1_store_proto_rawDescData)
	})
	return file_sideshow_coffeeco_v1_store_proto_rawDescData
}

var file_sideshow_coffeeco_v1_store_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sideshow_coffeeco_v1_store_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sideshow_coffeeco_v1_store_proto_goTypes = []interface{}{
	(Store_LocationStatus)(0),     // 0: sideshow.coffeeco.v1.Store.LocationStatus
	(*Store)(nil),                 // 1: sideshow.coffeeco.v1.Store
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_sideshow_coffeeco_v1_store_proto_depIdxs = []int32{
	2, // 0: sideshow.coffeeco.v1.Store.created:type_name -> google.protobuf.Timestamp
	2, // 1: sideshow.coffeeco.v1.Store.opened_on:type_name -> google.protobuf.Timestamp
	2, // 2: sideshow.coffeeco.v1.Store.closed_permanently_on:type_name -> google.protobuf.Timestamp
	0, // 3: sideshow.coffeeco.v1.Store.status:type_name -> sideshow.coffeeco.v1.Store.LocationStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_sideshow_coffeeco_v1_store_proto_init() }
func file_sideshow_coffeeco_v1_store_proto_init() {
	if File_sideshow_coffeeco_v1_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sideshow_coffeeco_v1_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sideshow_coffeeco_v1_store_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sideshow_coffeeco_v1_store_proto_goTypes,
		DependencyIndexes: file_sideshow_coffeeco_v1_store_proto_depIdxs,
		EnumInfos:         file_sideshow_coffeeco_v1_store_proto_enumTypes,
		MessageInfos:      file_sideshow_coffeeco_v1_store_proto_msgTypes,
	}.Build()
	File_sideshow_coffeeco_v1_store_proto = out.File
	file_sideshow_coffeeco_v1_store_proto_rawDesc = nil
	file_sideshow_coffeeco_v1_store_proto_goTypes = nil
	file_sideshow_coffeeco_v1_store_proto_depIdxs = nil
}
