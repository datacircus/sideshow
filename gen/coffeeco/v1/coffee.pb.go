// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: coffeeco/v1/coffee.proto

package coffeecov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coffee_Roast int32

const (
	Coffee_ROAST_UNSPECIFIED Coffee_Roast = 0
	Coffee_ROAST_LIGHT       Coffee_Roast = 1
	Coffee_ROAST_MEDIUM      Coffee_Roast = 2
	Coffee_ROAST_DARK        Coffee_Roast = 3
	Coffee_ROAST_EXTRA_DARK  Coffee_Roast = 4
)

// Enum value maps for Coffee_Roast.
var (
	Coffee_Roast_name = map[int32]string{
		0: "ROAST_UNSPECIFIED",
		1: "ROAST_LIGHT",
		2: "ROAST_MEDIUM",
		3: "ROAST_DARK",
		4: "ROAST_EXTRA_DARK",
	}
	Coffee_Roast_value = map[string]int32{
		"ROAST_UNSPECIFIED": 0,
		"ROAST_LIGHT":       1,
		"ROAST_MEDIUM":      2,
		"ROAST_DARK":        3,
		"ROAST_EXTRA_DARK":  4,
	}
)

func (x Coffee_Roast) Enum() *Coffee_Roast {
	p := new(Coffee_Roast)
	*p = x
	return p
}

func (x Coffee_Roast) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coffee_Roast) Descriptor() protoreflect.EnumDescriptor {
	return file_coffeeco_v1_coffee_proto_enumTypes[0].Descriptor()
}

func (Coffee_Roast) Type() protoreflect.EnumType {
	return &file_coffeeco_v1_coffee_proto_enumTypes[0]
}

func (x Coffee_Roast) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coffee_Roast.Descriptor instead.
func (Coffee_Roast) EnumDescriptor() ([]byte, []int) {
	return file_coffeeco_v1_coffee_proto_rawDescGZIP(), []int{0, 0}
}

type Coffee_FlavorProfile int32

const (
	Coffee_FLAVOR_PROFILE_UNSPECIFIED     Coffee_FlavorProfile = 0
	Coffee_FLAVOR_PROFILE_NUTTY           Coffee_FlavorProfile = 1
	Coffee_FLAVOR_PROFILE_PEANUTS         Coffee_FlavorProfile = 1111
	Coffee_FLAVOR_PROFILE_HAZELNUT        Coffee_FlavorProfile = 1112
	Coffee_FLAVOR_PROFILE_ALMOND          Coffee_FlavorProfile = 1113
	Coffee_FLAVOR_PROFILE_COCOA           Coffee_FlavorProfile = 2
	Coffee_FLAVOR_PROFILE_CHOCOLATE       Coffee_FlavorProfile = 2111
	Coffee_FLAVOR_PROFILE_DARK_CHOCOLATE  Coffee_FlavorProfile = 2112
	Coffee_FLAVOR_PROFILE_FLORAL          Coffee_FlavorProfile = 3
	Coffee_FLAVOR_PROFILE_BLACK_TEA       Coffee_FlavorProfile = 31
	Coffee_FLAVOR_PROFILE_FRUITY          Coffee_FlavorProfile = 4
	Coffee_FLAVOR_PROFILE_DRIED_FRUIT     Coffee_FlavorProfile = 41
	Coffee_FLAVOR_PROFILE_RAISIN          Coffee_FlavorProfile = 410
	Coffee_FLAVOR_PROFILE_PRUNE           Coffee_FlavorProfile = 411
	Coffee_FLAVOR_PROFILE_BERRY           Coffee_FlavorProfile = 42
	Coffee_FLAVOR_PROFILE_BLACKBERRY      Coffee_FlavorProfile = 420
	Coffee_FLAVOR_PROFILE_RASPBERRY       Coffee_FlavorProfile = 421
	Coffee_FLAVOR_PROFILE_BLUEBERRY       Coffee_FlavorProfile = 422
	Coffee_FLAVOR_PROFILE_STRAWBERRY      Coffee_FlavorProfile = 423
	Coffee_FLAVOR_PROFILE_OTHER_FRUIT     Coffee_FlavorProfile = 43
	Coffee_FLAVOR_PROFILE_COCONUT         Coffee_FlavorProfile = 430
	Coffee_FLAVOR_PROFILE_CHERRY          Coffee_FlavorProfile = 431
	Coffee_FLAVOR_PROFILE_POMEGRANATE     Coffee_FlavorProfile = 432
	Coffee_FLAVOR_PROFILE_PINEAPPLE       Coffee_FlavorProfile = 433
	Coffee_FLAVOR_PROFILE_GRAPE           Coffee_FlavorProfile = 434
	Coffee_FLAVOR_PROFILE_APPLE           Coffee_FlavorProfile = 435
	Coffee_FLAVOR_PROFILE_PEACH           Coffee_FlavorProfile = 436
	Coffee_FLAVOR_PROFILE_PEAR            Coffee_FlavorProfile = 437
	Coffee_FLAVOR_PROFILE_CITRUS_FRUIT    Coffee_FlavorProfile = 44
	Coffee_FLAVOR_PROFILE_GRAPEFRUIT      Coffee_FlavorProfile = 440
	Coffee_FLAVOR_PROFILE_ORANGE          Coffee_FlavorProfile = 441
	Coffee_FLAVOR_PROFILE_LEMON           Coffee_FlavorProfile = 442
	Coffee_FLAVOR_PROFILE_LIME            Coffee_FlavorProfile = 443
	Coffee_FLAVOR_PROFILE_SOUR            Coffee_FlavorProfile = 5
	Coffee_FLAVOR_PROFILE_SOUR_AROMATICS  Coffee_FlavorProfile = 50
	Coffee_FLAVOR_PROFILE_ACETIC_ACID     Coffee_FlavorProfile = 51
	Coffee_FLAVOR_PROFILE_BUTYRIC_ACID    Coffee_FlavorProfile = 52
	Coffee_FLAVOR_PROFILE_ISOVALERIC_ACID Coffee_FlavorProfile = 53
	Coffee_FLAVOR_PROFILE_CITRIC_ACID     Coffee_FlavorProfile = 54
	Coffee_FLAVOR_PROFILE_MALIC_ACID      Coffee_FlavorProfile = 55
	Coffee_FLAVOR_PROFILE_FERMENTED       Coffee_FlavorProfile = 6
	Coffee_FLAVOR_PROFILE_WINEY           Coffee_FlavorProfile = 60
	Coffee_FLAVOR_PROFILE_WHISKEY         Coffee_FlavorProfile = 61
	Coffee_FLAVOR_PROFILE_OVERRIPE        Coffee_FlavorProfile = 62
	Coffee_FLAVOR_PROFILE_GREEN           Coffee_FlavorProfile = 7
	Coffee_FLAVOR_PROFILE_OLIVE_OIL       Coffee_FlavorProfile = 70
	Coffee_FLAVOR_PROFILE_RAW             Coffee_FlavorProfile = 71
	Coffee_FLAVOR_PROFILE_VEGETATIVE      Coffee_FlavorProfile = 8
	Coffee_FLAVOR_PROFILE_UNDER_RIPE      Coffee_FlavorProfile = 80
	Coffee_FLAVOR_PROFILE_PEAPOD          Coffee_FlavorProfile = 81
	Coffee_FLAVOR_PROFILE_FRESH           Coffee_FlavorProfile = 82
	Coffee_FLAVOR_PROFILE_DARK_GREEN      Coffee_FlavorProfile = 83
	Coffee_FLAVOR_PROFILE_HAY_LIKE        Coffee_FlavorProfile = 84
	Coffee_FLAVOR_PROFILE_HERB_LIKE       Coffee_FlavorProfile = 85
	Coffee_FLAVOR_PROFILE_BEANY           Coffee_FlavorProfile = 86
	Coffee_FLAVOR_PROFILE_ROASTED         Coffee_FlavorProfile = 9
	Coffee_FLAVOR_PROFILE_CEREAL          Coffee_FlavorProfile = 90
	Coffee_FLAVOR_PROFILE_MALT            Coffee_FlavorProfile = 900
	Coffee_FLAVOR_PROFILE_GRAIN           Coffee_FlavorProfile = 901
	Coffee_FLAVOR_PROFILE_BURNT           Coffee_FlavorProfile = 91
	Coffee_FLAVOR_PROFILE_BROWN_ROAST     Coffee_FlavorProfile = 910
	Coffee_FLAVOR_PROFILE_SMOKY           Coffee_FlavorProfile = 911
	Coffee_FLAVOR_PROFILE_ASHY            Coffee_FlavorProfile = 912
	Coffee_FLAVOR_PROFILE_ACRID           Coffee_FlavorProfile = 913
	Coffee_FLAVOR_PROFILE_TOBACCO         Coffee_FlavorProfile = 92
	Coffee_FLAVOR_PROFILE_PIPE_TOBACCO    Coffee_FlavorProfile = 93
	Coffee_FLAVOR_PROFILE_SPICES          Coffee_FlavorProfile = 10
	Coffee_FLAVOR_PROFILE_BROWN_SPICE     Coffee_FlavorProfile = 100
	Coffee_FLAVOR_PROFILE_CLOVE           Coffee_FlavorProfile = 1000
	Coffee_FLAVOR_PROFILE_CINNAMON        Coffee_FlavorProfile = 1001
	Coffee_FLAVOR_PROFILE_NUTMEG          Coffee_FlavorProfile = 1002
	Coffee_FLAVOR_PROFILE_ANISE           Coffee_FlavorProfile = 1003
	Coffee_FLAVOR_PROFILE_PEPPER          Coffee_FlavorProfile = 101
	Coffee_FLAVOR_PROFILE_PUNGENT         Coffee_FlavorProfile = 102
	Coffee_FLAVOR_PROFILE_OTHER           Coffee_FlavorProfile = 11
	Coffee_FLAVOR_PROFILE_SWEET           Coffee_FlavorProfile = 12
	Coffee_FLAVOR_PROFILE_BROWN_SUGAR     Coffee_FlavorProfile = 120
	Coffee_FLAVOR_PROFILE_MOLASSES        Coffee_FlavorProfile = 1200
	Coffee_FLAVOR_PROFILE_MAPLE_SYRUP     Coffee_FlavorProfile = 1201
	Coffee_FLAVOR_PROFILE_CARMELIZED      Coffee_FlavorProfile = 1202
	Coffee_FLAVOR_PROFILE_HONEY           Coffee_FlavorProfile = 1203
	Coffee_FLAVOR_PROFILE_VANILLA         Coffee_FlavorProfile = 121
	Coffee_FLAVOR_PROFILE_VANILLIN        Coffee_FlavorProfile = 122
	Coffee_FLAVOR_PROFILE_OVERALL_SWEET   Coffee_FlavorProfile = 123
	Coffee_FLAVOR_PROFILE_SWEET_AROMATICS Coffee_FlavorProfile = 124
)

// Enum value maps for Coffee_FlavorProfile.
var (
	Coffee_FlavorProfile_name = map[int32]string{
		0:    "FLAVOR_PROFILE_UNSPECIFIED",
		1:    "FLAVOR_PROFILE_NUTTY",
		1111: "FLAVOR_PROFILE_PEANUTS",
		1112: "FLAVOR_PROFILE_HAZELNUT",
		1113: "FLAVOR_PROFILE_ALMOND",
		2:    "FLAVOR_PROFILE_COCOA",
		2111: "FLAVOR_PROFILE_CHOCOLATE",
		2112: "FLAVOR_PROFILE_DARK_CHOCOLATE",
		3:    "FLAVOR_PROFILE_FLORAL",
		31:   "FLAVOR_PROFILE_BLACK_TEA",
		4:    "FLAVOR_PROFILE_FRUITY",
		41:   "FLAVOR_PROFILE_DRIED_FRUIT",
		410:  "FLAVOR_PROFILE_RAISIN",
		411:  "FLAVOR_PROFILE_PRUNE",
		42:   "FLAVOR_PROFILE_BERRY",
		420:  "FLAVOR_PROFILE_BLACKBERRY",
		421:  "FLAVOR_PROFILE_RASPBERRY",
		422:  "FLAVOR_PROFILE_BLUEBERRY",
		423:  "FLAVOR_PROFILE_STRAWBERRY",
		43:   "FLAVOR_PROFILE_OTHER_FRUIT",
		430:  "FLAVOR_PROFILE_COCONUT",
		431:  "FLAVOR_PROFILE_CHERRY",
		432:  "FLAVOR_PROFILE_POMEGRANATE",
		433:  "FLAVOR_PROFILE_PINEAPPLE",
		434:  "FLAVOR_PROFILE_GRAPE",
		435:  "FLAVOR_PROFILE_APPLE",
		436:  "FLAVOR_PROFILE_PEACH",
		437:  "FLAVOR_PROFILE_PEAR",
		44:   "FLAVOR_PROFILE_CITRUS_FRUIT",
		440:  "FLAVOR_PROFILE_GRAPEFRUIT",
		441:  "FLAVOR_PROFILE_ORANGE",
		442:  "FLAVOR_PROFILE_LEMON",
		443:  "FLAVOR_PROFILE_LIME",
		5:    "FLAVOR_PROFILE_SOUR",
		50:   "FLAVOR_PROFILE_SOUR_AROMATICS",
		51:   "FLAVOR_PROFILE_ACETIC_ACID",
		52:   "FLAVOR_PROFILE_BUTYRIC_ACID",
		53:   "FLAVOR_PROFILE_ISOVALERIC_ACID",
		54:   "FLAVOR_PROFILE_CITRIC_ACID",
		55:   "FLAVOR_PROFILE_MALIC_ACID",
		6:    "FLAVOR_PROFILE_FERMENTED",
		60:   "FLAVOR_PROFILE_WINEY",
		61:   "FLAVOR_PROFILE_WHISKEY",
		62:   "FLAVOR_PROFILE_OVERRIPE",
		7:    "FLAVOR_PROFILE_GREEN",
		70:   "FLAVOR_PROFILE_OLIVE_OIL",
		71:   "FLAVOR_PROFILE_RAW",
		8:    "FLAVOR_PROFILE_VEGETATIVE",
		80:   "FLAVOR_PROFILE_UNDER_RIPE",
		81:   "FLAVOR_PROFILE_PEAPOD",
		82:   "FLAVOR_PROFILE_FRESH",
		83:   "FLAVOR_PROFILE_DARK_GREEN",
		84:   "FLAVOR_PROFILE_HAY_LIKE",
		85:   "FLAVOR_PROFILE_HERB_LIKE",
		86:   "FLAVOR_PROFILE_BEANY",
		9:    "FLAVOR_PROFILE_ROASTED",
		90:   "FLAVOR_PROFILE_CEREAL",
		900:  "FLAVOR_PROFILE_MALT",
		901:  "FLAVOR_PROFILE_GRAIN",
		91:   "FLAVOR_PROFILE_BURNT",
		910:  "FLAVOR_PROFILE_BROWN_ROAST",
		911:  "FLAVOR_PROFILE_SMOKY",
		912:  "FLAVOR_PROFILE_ASHY",
		913:  "FLAVOR_PROFILE_ACRID",
		92:   "FLAVOR_PROFILE_TOBACCO",
		93:   "FLAVOR_PROFILE_PIPE_TOBACCO",
		10:   "FLAVOR_PROFILE_SPICES",
		100:  "FLAVOR_PROFILE_BROWN_SPICE",
		1000: "FLAVOR_PROFILE_CLOVE",
		1001: "FLAVOR_PROFILE_CINNAMON",
		1002: "FLAVOR_PROFILE_NUTMEG",
		1003: "FLAVOR_PROFILE_ANISE",
		101:  "FLAVOR_PROFILE_PEPPER",
		102:  "FLAVOR_PROFILE_PUNGENT",
		11:   "FLAVOR_PROFILE_OTHER",
		12:   "FLAVOR_PROFILE_SWEET",
		120:  "FLAVOR_PROFILE_BROWN_SUGAR",
		1200: "FLAVOR_PROFILE_MOLASSES",
		1201: "FLAVOR_PROFILE_MAPLE_SYRUP",
		1202: "FLAVOR_PROFILE_CARMELIZED",
		1203: "FLAVOR_PROFILE_HONEY",
		121:  "FLAVOR_PROFILE_VANILLA",
		122:  "FLAVOR_PROFILE_VANILLIN",
		123:  "FLAVOR_PROFILE_OVERALL_SWEET",
		124:  "FLAVOR_PROFILE_SWEET_AROMATICS",
	}
	Coffee_FlavorProfile_value = map[string]int32{
		"FLAVOR_PROFILE_UNSPECIFIED":     0,
		"FLAVOR_PROFILE_NUTTY":           1,
		"FLAVOR_PROFILE_PEANUTS":         1111,
		"FLAVOR_PROFILE_HAZELNUT":        1112,
		"FLAVOR_PROFILE_ALMOND":          1113,
		"FLAVOR_PROFILE_COCOA":           2,
		"FLAVOR_PROFILE_CHOCOLATE":       2111,
		"FLAVOR_PROFILE_DARK_CHOCOLATE":  2112,
		"FLAVOR_PROFILE_FLORAL":          3,
		"FLAVOR_PROFILE_BLACK_TEA":       31,
		"FLAVOR_PROFILE_FRUITY":          4,
		"FLAVOR_PROFILE_DRIED_FRUIT":     41,
		"FLAVOR_PROFILE_RAISIN":          410,
		"FLAVOR_PROFILE_PRUNE":           411,
		"FLAVOR_PROFILE_BERRY":           42,
		"FLAVOR_PROFILE_BLACKBERRY":      420,
		"FLAVOR_PROFILE_RASPBERRY":       421,
		"FLAVOR_PROFILE_BLUEBERRY":       422,
		"FLAVOR_PROFILE_STRAWBERRY":      423,
		"FLAVOR_PROFILE_OTHER_FRUIT":     43,
		"FLAVOR_PROFILE_COCONUT":         430,
		"FLAVOR_PROFILE_CHERRY":          431,
		"FLAVOR_PROFILE_POMEGRANATE":     432,
		"FLAVOR_PROFILE_PINEAPPLE":       433,
		"FLAVOR_PROFILE_GRAPE":           434,
		"FLAVOR_PROFILE_APPLE":           435,
		"FLAVOR_PROFILE_PEACH":           436,
		"FLAVOR_PROFILE_PEAR":            437,
		"FLAVOR_PROFILE_CITRUS_FRUIT":    44,
		"FLAVOR_PROFILE_GRAPEFRUIT":      440,
		"FLAVOR_PROFILE_ORANGE":          441,
		"FLAVOR_PROFILE_LEMON":           442,
		"FLAVOR_PROFILE_LIME":            443,
		"FLAVOR_PROFILE_SOUR":            5,
		"FLAVOR_PROFILE_SOUR_AROMATICS":  50,
		"FLAVOR_PROFILE_ACETIC_ACID":     51,
		"FLAVOR_PROFILE_BUTYRIC_ACID":    52,
		"FLAVOR_PROFILE_ISOVALERIC_ACID": 53,
		"FLAVOR_PROFILE_CITRIC_ACID":     54,
		"FLAVOR_PROFILE_MALIC_ACID":      55,
		"FLAVOR_PROFILE_FERMENTED":       6,
		"FLAVOR_PROFILE_WINEY":           60,
		"FLAVOR_PROFILE_WHISKEY":         61,
		"FLAVOR_PROFILE_OVERRIPE":        62,
		"FLAVOR_PROFILE_GREEN":           7,
		"FLAVOR_PROFILE_OLIVE_OIL":       70,
		"FLAVOR_PROFILE_RAW":             71,
		"FLAVOR_PROFILE_VEGETATIVE":      8,
		"FLAVOR_PROFILE_UNDER_RIPE":      80,
		"FLAVOR_PROFILE_PEAPOD":          81,
		"FLAVOR_PROFILE_FRESH":           82,
		"FLAVOR_PROFILE_DARK_GREEN":      83,
		"FLAVOR_PROFILE_HAY_LIKE":        84,
		"FLAVOR_PROFILE_HERB_LIKE":       85,
		"FLAVOR_PROFILE_BEANY":           86,
		"FLAVOR_PROFILE_ROASTED":         9,
		"FLAVOR_PROFILE_CEREAL":          90,
		"FLAVOR_PROFILE_MALT":            900,
		"FLAVOR_PROFILE_GRAIN":           901,
		"FLAVOR_PROFILE_BURNT":           91,
		"FLAVOR_PROFILE_BROWN_ROAST":     910,
		"FLAVOR_PROFILE_SMOKY":           911,
		"FLAVOR_PROFILE_ASHY":            912,
		"FLAVOR_PROFILE_ACRID":           913,
		"FLAVOR_PROFILE_TOBACCO":         92,
		"FLAVOR_PROFILE_PIPE_TOBACCO":    93,
		"FLAVOR_PROFILE_SPICES":          10,
		"FLAVOR_PROFILE_BROWN_SPICE":     100,
		"FLAVOR_PROFILE_CLOVE":           1000,
		"FLAVOR_PROFILE_CINNAMON":        1001,
		"FLAVOR_PROFILE_NUTMEG":          1002,
		"FLAVOR_PROFILE_ANISE":           1003,
		"FLAVOR_PROFILE_PEPPER":          101,
		"FLAVOR_PROFILE_PUNGENT":         102,
		"FLAVOR_PROFILE_OTHER":           11,
		"FLAVOR_PROFILE_SWEET":           12,
		"FLAVOR_PROFILE_BROWN_SUGAR":     120,
		"FLAVOR_PROFILE_MOLASSES":        1200,
		"FLAVOR_PROFILE_MAPLE_SYRUP":     1201,
		"FLAVOR_PROFILE_CARMELIZED":      1202,
		"FLAVOR_PROFILE_HONEY":           1203,
		"FLAVOR_PROFILE_VANILLA":         121,
		"FLAVOR_PROFILE_VANILLIN":        122,
		"FLAVOR_PROFILE_OVERALL_SWEET":   123,
		"FLAVOR_PROFILE_SWEET_AROMATICS": 124,
	}
)

func (x Coffee_FlavorProfile) Enum() *Coffee_FlavorProfile {
	p := new(Coffee_FlavorProfile)
	*p = x
	return p
}

func (x Coffee_FlavorProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coffee_FlavorProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_coffeeco_v1_coffee_proto_enumTypes[1].Descriptor()
}

func (Coffee_FlavorProfile) Type() protoreflect.EnumType {
	return &file_coffeeco_v1_coffee_proto_enumTypes[1]
}

func (x Coffee_FlavorProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coffee_FlavorProfile.Descriptor instead.
func (Coffee_FlavorProfile) EnumDescriptor() ([]byte, []int) {
	return file_coffeeco_v1_coffee_proto_rawDescGZIP(), []int{0, 1}
}

type Coffee_CoffeeVendor int32

const (
	Coffee_COFFEE_VENDOR_UNSPECIFIED Coffee_CoffeeVendor = 0
	Coffee_COFFEE_VENDOR_VERVE       Coffee_CoffeeVendor = 1
	Coffee_COFFEE_VENDOR_RITUAL      Coffee_CoffeeVendor = 2
	Coffee_COFFEE_VENDOR_FOUR_BARREL Coffee_CoffeeVendor = 3
)

// Enum value maps for Coffee_CoffeeVendor.
var (
	Coffee_CoffeeVendor_name = map[int32]string{
		0: "COFFEE_VENDOR_UNSPECIFIED",
		1: "COFFEE_VENDOR_VERVE",
		2: "COFFEE_VENDOR_RITUAL",
		3: "COFFEE_VENDOR_FOUR_BARREL",
	}
	Coffee_CoffeeVendor_value = map[string]int32{
		"COFFEE_VENDOR_UNSPECIFIED": 0,
		"COFFEE_VENDOR_VERVE":       1,
		"COFFEE_VENDOR_RITUAL":      2,
		"COFFEE_VENDOR_FOUR_BARREL": 3,
	}
)

func (x Coffee_CoffeeVendor) Enum() *Coffee_CoffeeVendor {
	p := new(Coffee_CoffeeVendor)
	*p = x
	return p
}

func (x Coffee_CoffeeVendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coffee_CoffeeVendor) Descriptor() protoreflect.EnumDescriptor {
	return file_coffeeco_v1_coffee_proto_enumTypes[2].Descriptor()
}

func (Coffee_CoffeeVendor) Type() protoreflect.EnumType {
	return &file_coffeeco_v1_coffee_proto_enumTypes[2]
}

func (x Coffee_CoffeeVendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coffee_CoffeeVendor.Descriptor instead.
func (Coffee_CoffeeVendor) EnumDescriptor() ([]byte, []int) {
	return file_coffeeco_v1_coffee_proto_rawDescGZIP(), []int{0, 2}
}

type Coffee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vendor        Coffee_CoffeeVendor    `protobuf:"varint,4,opt,name=vendor,proto3,enum=coffeeco.v1.Coffee_CoffeeVendor" json:"vendor,omitempty"`
	Roast         Coffee_Roast           `protobuf:"varint,2,opt,name=roast,proto3,enum=coffeeco.v1.Coffee_Roast" json:"roast,omitempty"`
	FlavorProfile []Coffee_FlavorProfile `protobuf:"varint,3,rep,packed,name=flavor_profile,json=flavorProfile,proto3,enum=coffeeco.v1.Coffee_FlavorProfile" json:"flavor_profile,omitempty"`
}

func (x *Coffee) Reset() {
	*x = Coffee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coffeeco_v1_coffee_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coffee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coffee) ProtoMessage() {}

func (x *Coffee) ProtoReflect() protoreflect.Message {
	mi := &file_coffeeco_v1_coffee_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coffee.ProtoReflect.Descriptor instead.
func (*Coffee) Descriptor() ([]byte, []int) {
	return file_coffeeco_v1_coffee_proto_rawDescGZIP(), []int{0}
}

func (x *Coffee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coffee) GetVendor() Coffee_CoffeeVendor {
	if x != nil {
		return x.Vendor
	}
	return Coffee_COFFEE_VENDOR_UNSPECIFIED
}

func (x *Coffee) GetRoast() Coffee_Roast {
	if x != nil {
		return x.Roast
	}
	return Coffee_ROAST_UNSPECIFIED
}

func (x *Coffee) GetFlavorProfile() []Coffee_FlavorProfile {
	if x != nil {
		return x.FlavorProfile
	}
	return nil
}

var File_coffeeco_v1_coffee_proto protoreflect.FileDescriptor

var file_coffeeco_v1_coffee_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x66, 0x66,
	0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x17, 0x0a, 0x06, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba,
	0x48, 0x0a, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x03, 0x18, 0xac, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x03, 0x22,
	0x01, 0x00, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x6f,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x66, 0x66,
	0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x2e, 0x52,
	0x6f, 0x61, 0x73, 0x74, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x03, 0x22,
	0x01, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x04, 0x10,
	0x14, 0x18, 0x01, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x67, 0x0a, 0x05, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x4f, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x44,
	0x41, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x04, 0x22, 0xc1, 0x13, 0x0a, 0x0d,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4e, 0x55, 0x54, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x4e, 0x55, 0x54,
	0x53, 0x10, 0xd7, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x5a, 0x45, 0x4c, 0x4e, 0x55, 0x54, 0x10,
	0xd8, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0xd9, 0x08, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x43, 0x4f, 0x41, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x43, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0xbf, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x43,
	0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xc0, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4c,
	0x4f, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x45, 0x41, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x44, 0x52, 0x49, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0x29, 0x12,
	0x1a, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x9a, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x55, 0x4e, 0x45, 0x10, 0x9b, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0x2a,
	0x12, 0x1e, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xa4, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x41, 0x53, 0x50, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xa5, 0x03, 0x12,
	0x1d, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xa6, 0x03, 0x12, 0x1e,
	0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x57, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0xa7, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0x2b, 0x12, 0x1b,
	0x0a, 0x16, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x43, 0x4f, 0x4e, 0x55, 0x54, 0x10, 0xae, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x52, 0x52, 0x59, 0x10, 0xaf, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x4d, 0x45, 0x47, 0x52,
	0x41, 0x4e, 0x41, 0x54, 0x45, 0x10, 0xb0, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x45, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x10, 0xb1, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x45, 0x10,
	0xb2, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x10, 0xb3, 0x03, 0x12, 0x19, 0x0a,
	0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x50, 0x45, 0x41, 0x43, 0x48, 0x10, 0xb4, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x10,
	0xb5, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x52, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x55, 0x49,
	0x54, 0x10, 0x2c, 0x12, 0x1e, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x45, 0x46, 0x52, 0x55, 0x49, 0x54,
	0x10, 0xb8, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xb9, 0x03, 0x12,
	0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4c, 0x45, 0x4d, 0x4f, 0x4e, 0x10, 0xba, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x4c,
	0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x45, 0x10, 0xbb, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x10, 0x05, 0x12, 0x21, 0x0a,
	0x1d, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x10, 0x32,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10, 0x33,
	0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x59, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10,
	0x34, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x56, 0x41, 0x4c, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x41,
	0x43, 0x49, 0x44, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x41,
	0x43, 0x49, 0x44, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x5f, 0x41, 0x43,
	0x49, 0x44, 0x10, 0x37, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x45, 0x59, 0x10, 0x3c, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57,
	0x48, 0x49, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x3d, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x50, 0x45, 0x10, 0x3e, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x49, 0x4c, 0x10, 0x46, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x47, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x50,
	0x45, 0x10, 0x50, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x50, 0x4f, 0x44, 0x10, 0x51, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x52, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x53, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x59, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x10, 0x54, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x42, 0x5f, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0x55, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x4e, 0x59, 0x10, 0x56, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x4f, 0x41, 0x53, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41,
	0x4c, 0x10, 0x5a, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x54, 0x10, 0x84, 0x07, 0x12, 0x19, 0x0a,
	0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x85, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x54,
	0x10, 0x5b, 0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54,
	0x10, 0x8e, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x59, 0x10, 0x8f, 0x07, 0x12, 0x18,
	0x0a, 0x13, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x53, 0x48, 0x59, 0x10, 0x90, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x52, 0x49, 0x44,
	0x10, 0x91, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x5c, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x5d,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x52,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45, 0x10, 0x64, 0x12, 0x19, 0x0a, 0x14, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x56, 0x45, 0x10, 0xe8, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x49, 0x4e, 0x4e, 0x41, 0x4d, 0x4f,
	0x4e, 0x10, 0xe9, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x55, 0x54, 0x4d, 0x45, 0x47, 0x10, 0xea, 0x07,
	0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x49, 0x53, 0x45, 0x10, 0xeb, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x45,
	0x50, 0x50, 0x45, 0x52, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x57, 0x45, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x55, 0x47, 0x41, 0x52, 0x10, 0x78, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x4c, 0x41, 0x53, 0x53, 0x45,
	0x53, 0x10, 0xb0, 0x09, 0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x52,
	0x55, 0x50, 0x10, 0xb1, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x4d, 0x45, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0xb2, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0xb3, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4e, 0x49, 0x4c, 0x4c, 0x41, 0x10, 0x79, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56,
	0x41, 0x4e, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x10, 0x7a, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x4c, 0x41,
	0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x54, 0x10, 0x7b, 0x12, 0x22, 0x0a, 0x1e, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x57,
	0x45, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x10, 0x7c, 0x22,
	0x7f, 0x0a, 0x0c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x56, 0x45, 0x52, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x46, 0x46, 0x45,
	0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x54, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x45, 0x4c, 0x10, 0x03,
	0x42, 0xa6, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63,
	0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x69, 0x72, 0x63, 0x75, 0x73, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0b, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x17, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x43, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x63, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_coffeeco_v1_coffee_proto_rawDescOnce sync.Once
	file_coffeeco_v1_coffee_proto_rawDescData = file_coffeeco_v1_coffee_proto_rawDesc
)

func file_coffeeco_v1_coffee_proto_rawDescGZIP() []byte {
	file_coffeeco_v1_coffee_proto_rawDescOnce.Do(func() {
		file_coffeeco_v1_coffee_proto_rawDescData = protoimpl.X.CompressGZIP(file_coffeeco_v1_coffee_proto_rawDescData)
	})
	return file_coffeeco_v1_coffee_proto_rawDescData
}

var file_coffeeco_v1_coffee_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_coffeeco_v1_coffee_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_coffeeco_v1_coffee_proto_goTypes = []interface{}{
	(Coffee_Roast)(0),         // 0: coffeeco.v1.Coffee.Roast
	(Coffee_FlavorProfile)(0), // 1: coffeeco.v1.Coffee.FlavorProfile
	(Coffee_CoffeeVendor)(0),  // 2: coffeeco.v1.Coffee.CoffeeVendor
	(*Coffee)(nil),            // 3: coffeeco.v1.Coffee
}
var file_coffeeco_v1_coffee_proto_depIdxs = []int32{
	2, // 0: coffeeco.v1.Coffee.vendor:type_name -> coffeeco.v1.Coffee.CoffeeVendor
	0, // 1: coffeeco.v1.Coffee.roast:type_name -> coffeeco.v1.Coffee.Roast
	1, // 2: coffeeco.v1.Coffee.flavor_profile:type_name -> coffeeco.v1.Coffee.FlavorProfile
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_coffeeco_v1_coffee_proto_init() }
func file_coffeeco_v1_coffee_proto_init() {
	if File_coffeeco_v1_coffee_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coffeeco_v1_coffee_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coffee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coffeeco_v1_coffee_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coffeeco_v1_coffee_proto_goTypes,
		DependencyIndexes: file_coffeeco_v1_coffee_proto_depIdxs,
		EnumInfos:         file_coffeeco_v1_coffee_proto_enumTypes,
		MessageInfos:      file_coffeeco_v1_coffee_proto_msgTypes,
	}.Build()
	File_coffeeco_v1_coffee_proto = out.File
	file_coffeeco_v1_coffee_proto_rawDesc = nil
	file_coffeeco_v1_coffee_proto_goTypes = nil
	file_coffeeco_v1_coffee_proto_depIdxs = nil
}
